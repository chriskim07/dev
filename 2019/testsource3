	/**
	 *
	 */
	public int getNumberOfPeopleIsolated(List<HikingInfo> inputData, HashMap<Integer, Integer> personInfo) {
		int numberOfPeopleIsolated = 0;
		
		
		////////////////////////
		HashMap<Integer, Integer> childMap = new HashMap<>();
		
		HashMap<Integer, ArrayList<Integer>> parentMap = new HashMap<>();
		
		List<Integer> lastPosition = new ArrayList<>();
		
		for(HikingInfo data : inputData){
			if(data.getSubPoint() > 0){
				childMap.put(data.getSubPoint(), data.getTopPoint());
				ArrayList<Integer> parents = null;
				
				if(parentMap.keySet().contains(data.getTopPoint())){
					parents = parentMap.get(data.getTopPoint());
				}else{
					parents = new ArrayList<>();
				}
				
				parents.add(data.getSubPoint());
				
				parentMap.put(data.getTopPoint(), parents);
//				System.out.println("data.getTopPoint() : " + data.getTopPoint());
//				System.out.println("parents : " + parents);
				
			}else if(data.getSubPoint() == 0){
				lastPosition.add(data.getTopPoint());
			}
		}
		
		for(Integer point : lastPosition){//point
			if(!parentMap.keySet().contains(point)){//
//				System.out.println("point : " + point); // 9
				numberOfPeopleIsolated += personInfo.get(point);
				int pPoint = 0;
				int testPoint = point;
				while(pPoint > -1){
					pPoint = findCrackParents(childMap, parentMap, testPoint);
					if(pPoint != -1){
						numberOfPeopleIsolated += personInfo.get(pPoint);
						testPoint = pPoint;
					}
				}
			}
		}
		
		/////////////////////////////
		
		
		return numberOfPeopleIsolated;
	}


	// childMap : {3=1, 4=1, 5=2, 6=2, 7=3, 9=4, 10=5, 11=6, 12=6, 13=7, 14=8}
	// parentMap : {1=[3, 4], 2=[5, 6], 3=[7], 4=[9], 5=[10], 6=[11, 12], 7=[13], 8=[14]}
	// point : 9 
	public int findCrackParents(HashMap<Integer, Integer> childMap, HashMap<Integer, ArrayList<Integer>> parentMap, int point){
		if(childMap.keySet().contains(point)){
			int parentPoint = childMap.get(point); // 4
			if(parentMap.keySet().contains(parentPoint) && parentMap.get(parentPoint).size() == 1){
				return parentPoint;
			}
		}
		
		return -1;
	}
