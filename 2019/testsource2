	/**
	 *
	 */
	public List<HikingInfo> getLostHikingTrail(List<HikingInfo> inputData) {
		List<HikingInfo> lostHikingTrail = null;
		
		
		////////////////////////
		lostHikingTrail = new ArrayList<>();
		HashMap<Integer, Integer> childMap = new HashMap<>();
		
		HashMap<Integer, ArrayList<Integer>> parentMap = new HashMap<>();
		
		List<Integer> lastPosition = new ArrayList<>();
		
		int maxPoint = 0;
		
		for(HikingInfo data : inputData){
			if(data.getTopPoint() > maxPoint){
				maxPoint = data.getTopPoint();
			}
			if(data.getSubPoint() > 0){
				childMap.put(data.getSubPoint(), data.getTopPoint());
				ArrayList<Integer> parents = null;
				
				if(parentMap.keySet().contains(data.getTopPoint())){
					parents = parentMap.get(data.getTopPoint());
				}else{
					parents = new ArrayList<>();
				}
				
				parents.add(data.getSubPoint());
				
				parentMap.put(data.getTopPoint(), parents);
				
			}else if(data.getSubPoint() == 0){
				lastPosition.add(data.getTopPoint());
			}
		}
		
		int startPoint = 0;
		
		for(Integer point : lastPosition){//point [1, 3, 9]
			if(startPoint == 0){
				startPoint = point+1;
			}
			for(int i = startPoint ; i <= maxPoint ; i++){
				// childMap : {3=1, 4=1, 5=2, 6=2, 7=3, 9=4, 10=5, 11=6, 12=6, 13=7, 14=8}
				if(!childMap.keySet().contains(i)){//no parent
					HikingInfo info = new HikingInfo();
					info.setTopPoint(point);
					info.setSubPoint(i);
					lostHikingTrail.add(info);
//					System.out.println("point : " + point);
//					System.out.println("i : " + i);
					startPoint = i + 1;
					break;
				}
			}
		}
		/////////////////////////////
		
		
		return lostHikingTrail;
	}
